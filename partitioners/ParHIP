#!/bin/bash
IsInstalled() {
    if [[ ! -x "$GLOBAL_PREFIX/bin/parhip" ]]; then
        return 1
    fi
    if [[ ! -x "$GLOBAL_PREFIX/bin/InMemoryParhip" ]]; then 
        return 1 
    fi

    git -C "$GLOBAL_PREFIX/src/KaHIP" fetch
    local_hash=$(git -C "$GLOBAL_PREFIX/src/KaHIP" rev-parse HEAD)
    remote_hash=$(git -C "$GLOBAL_PREFIX/src/KaHIP" rev-parse @{u})
    if [[ "$local_hash" == "$remote_hash" ]]; then 
        return 0
    fi

    return 1
}

Binary() {
    echo "$GLOBAL_PREFIX/bin/parhip"
}

Install() {
    if [[ "$version" != "latest" ]]; then
        echo "Error: version support not implemented"
        exit 1
    fi 

    if IsInstalled; then 
        return 0
    fi

    # Standalone ParHIP
    if [[ ! -d "$GLOBAL_PREFIX/src/KaHIP" ]]; then 
        git clone git@github.com:KaHIP/KaHIP.git "$GLOBAL_PREFIX/src/KaHIP"
    else 
        git -C "$GLOBAL_PREFIX/src/KaHIP" pull
    fi
    
    current_pwd="$PWD"
    cd "$GLOBAL_PREFIX/src/KaHIP"
    CMAKE_GENERATOR="Unix Makefiles" ./compile_withcmake.sh
    cd "$current_pwd"

    mkdir -p "$GLOBAL_PREFIX/bin"
    cp "$GLOBAL_PREFIX/src/KaHIP/deploy/parhip" "$(Binary)"
    cp "$GLOBAL_PREFIX/src/KaHIP/deploy/libparhip"* "$GLOBAL_PREFIX/lib/"
    cp "$GLOBAL_PREFIX/src/KaHIP/deploy/parhip_interface.h" "$GLOBAL_PREFIX/include/"
    cp "$GLOBAL_PREFIX/src/KaHIP/deploy/parallel/libkahip"* "$GLOBAL_PREFIX/lib/"

    if [[ ! -x "$GLOBAL_PREFIX/bin/ParHIP_KaGen" ]]; then # Requirement: KaGen
        src_dir="$GLOBAL_PREFIX/src/KaGen-Partitioner"
        if [[ ! -d "$src_dir" ]]; then
            git clone git@github.com:KaHIP/KaGen-Partitioner.git "$src_dir"
        else 
            git -C "$src_dir" pull 
        fi
        
        cmake -S "$src_dir" -B "$src_dir/build" -DCMAKE_BUILD_TYPE=Release -DDKAMINPAR=On -DXTRAPULP=On "$TBB_FLAG" $2
        cmake --build "$src_dir/build" --parallel
    
        cp "$src_dir/build/ParHIP" "$GLOBAL_PREFIX/bin/ParHIP_KaGen"
        cp "$src_dir/build/ParMETIS" "$GLOBAL_PREFIX/bin/ParMETIS_KaGen"
        cp "$src_dir/build/dKaMinPar" "$GLOBAL_PREFIX/bin/dKaMinPar_KaGen"
        cp "$src_dir/build/XtraPuLP" "$GLOBAL_PREFIX/bin/XtraPuLP_KaGen"
    fi 
}

InvokeFromDisk() {
    version="$1"
    graph="$2"
    k="$3"
    epsilon="$4"
    seed="$5"
    arguments="${@:9}"
  
    # .bgf > .graph > .metis
    [[ -f "$graph.bgf" ]] && graph="$graph.bgf"
    [[ -f "$graph.graph" ]] && graph="$graph.graph"
    [[ -f "$graph.metis" ]] && graph="$graph.metis"

    # ParHIP expects 3 for 3% etc
    imbalance=$(echo "100*$epsilon/1" | bc)

    if [[ -f "$graph" ]]; then
        echo "$(Binary) --k=$k --imbalance=$imbalance --seed=$seed $graph $arguments"
    else 
        >&2 echo "Warning: Graph $graph does not exist"
        return 1
    fi
}

InvokeFromKaGen() {
    param_version="$1"
    param_generator="$2"
    param_k="$3"
    param_epsilon="$4"
    param_seed="$5"
    param_nodes="$6"
    param_threads="$8"
    param_kagen_arguments="$9"
    param_algo_arguments="${@:10}"

    echo -n "$GLOBAL_PREFIX/bin/ParHIP_KaGen "
    echo -n "-s $param_seed " # interprete as number of repetitions 
    echo -n "-k $param_k "

    preconfig="${param_algo_arguments[0]}"
    if [[ "${param_algo_arguments[@]}" == *"--preconfiguration=ecosocial"* ]]; then 
        echo -n "-P ecosocial "
    elif [[ "${param_algo_arguments[@]}" == *"--preconfiguration=fastsocial"* ]]; then 
        echo -n "-P fastsocial "
    else
        >&2 echo "Warning: unsupported argument ${param_algo_arguments[@]}"
        return 1 
    fi
    echo -n "-G\"$param_generator"

    kagen_n=$(ParseKaGenArgument "n" $param_kagen_arguments)
    kagen_m=$(ParseKaGenArgument "m" $param_kagen_arguments)
    kagen_p=$(ParseKaGenArgument "p" $param_kagen_arguments)
    kagen_a=$(ParseKaGenArgument "a" $param_kagen_arguments)
    kagen_b=$(ParseKaGenArgument "b" $param_kagen_arguments)
    kagen_c=$(ParseKaGenArgument "c" $param_kagen_arguments)
    kagen_gamma=$(ParseKaGenArgument "gamma" $param_kagen_arguments)

    log_nodes=$(printf "%.0f" $(echo "l($param_nodes)/l(2)" | bc -l))

    if [[ ! -z "$kagen_a" ]]; then 
        echo -n ";rmat_a=$kagen_a;rmat_b=$kagen_b;rmat_c=$kagen_c"
    fi
    if [[ ! -z "$kagen_p" ]]; then 
        echo -n ";prob=$kagen_p"
    fi
    if [[ ! -z "$kagen_gamma" ]]; then 
        echo -n ";gamma=$kagen_gamma"
    fi
    if [[ ! -z "$kagen_n" ]]; then 
        echo -n ";N=$((kagen_n+log_nodes))" # log n
    fi
    if [[ ! -z "$kagen_m" ]]; then 
        echo -n ";M=$((kagen_m+log_nodes))" # log m
    fi

    echo -n "\""
    echo ""
}
