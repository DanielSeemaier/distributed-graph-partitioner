#!/bin/bash
IsInstalled() {
    if [[ ! -x "$PREFIX/bin/parhip" ]]; then
        return 1
    fi
    if [[ ! -d "$PREFIX/src/KaHIP" ]]; then 
        return 1
    fi

    git -C "$PREFIX/src/KaHIP" fetch
    local_hash=$(git -C "$PREFIX/src/KaHIP" rev-parse HEAD)
    remote_hash=$(git -C "$PREFIX/src/KaHIP" rev-parse @{u})
    if [[ "$local_hash" == "$remote_hash" ]]; then 
        return 0
    fi

    return 1
}

Binary() {
    echo "$PREFIX/bin/parhip"
}

Install() {
    if [[ "$version" != "latest" ]]; 
        echo "Error: version support not implemented"
        exit 1
    fi 

    if IsInstalled; then 
        return 0
    fi

    if [[ ! -d "$PREFIX/src/KaHIP" ]]; then 
        git clone git@github.com:KaHIP/KaHIP.git "$PREFIX/src/KaHIP"
    else 
        git -C "$PREFIX/src/KaHIP" pull
    fi
    
    current_pwd="$PWD"
    cd "$PREFIX/src/KaHIP"
    CMAKE_GENERATOR="Unix Makefiles" ./compile_withcmake.sh
    cd "$current_pwd"

    mkdir -p "$PREFIX/bin"
    cp "$PREFIX/src/KaHIP/deploy/parhip" "$(Binary)"
}

InvokeFromDisk() {
    version="$1"
    graph="$2"
    k="$3"
    epsilon="$4"
    seed="$5"
    threads="$6"
    arguments="${@:7}"
  
    # .bgf > .graph > .metis
    [[ -f "$graph.bgf" ]] && graph="$graph.bgf"
    [[ -f "$graph.graph" ]] && graph="$graph.graph"
    [[ -f "$graph.metis" ]] && graph="$graph.metis"

    # ParHIP expects 3 for 3% etc
    imbalance=$(echo "100*$epsilon/1" | bc)

    if [[ -f "$graph" ]]; then
        echo "$(Binary) --k=$k --imbalance=$imbalance --seed=$seed $graph $arguments"
    else 
        >&2 echo "Warning: Graph $graph does not exist"
        return 1
    fi
}
