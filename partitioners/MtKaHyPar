#!/bin/bash

. "$script_pwd/../partitioners/inc/git.sh"

Fetch() {
    local -n fetch_args=$1

    if (( ${fetch_args[install_disk_driver]} )); then 
        FetchDiskDriver fetch_args
    fi
    if (( ${fetch_args[install_kagen_driver]} )); then 
        echo "KaGen support not implemented for MtKaHyPar"
        exit 1
    fi
}

FetchDiskDriver() {
    GenericGitFetch $1 "git@github.com:kahypar/mt-kahypar.git" "disk_driver_src"
}

Install() {
    local -n install_args=$1
    
    if (( ${install_args[install_disk_driver]} )); then 
        InstallDiskDriver install_args
    fi
    if (( ${install_args[install_kagen_driver]} )); then 
        echo "KaGen support not implemented for MtKaHyPar"
        exit 1
    fi
}

InstallDiskDriver() {
    local -n install_disk_driver_args=$1
    src_dir="${install_disk_driver_args[disk_driver_src]}"

    current_pwd="$PWD"

    cmake -S "$src_dir" \
        -B "$src_dir/build" \
        -DCMAKE_BUILD_TYPE=Release \
        -DKAHYPAR_ENFORCE_MINIMUM_TBB_VERSION=Off \
        $CUSTOM_CMAKE_FLAGS \
f       ${install_disk_driver_args[algorithm_build_options]}

    cmake --build "$src_dir/build" --target MtKaHyPar --parallel

    cp "$src_dir/build/mt-kahypar/application/MtKaHyPar" "${install_disk_driver_args[disk_driver_bin]}"
}

InvokeFromDisk() {
    local -n invoke_from_disk_args=$1
    
    graph="${invoke_from_disk_args[graph]}"
    format="metis"
    if [[ -f "$graph.graph" ]]; then
        graph="$graph.graph"
        format="metis"
    elif [[ -f "$graph.metis" ]]; then
        graph="$graph.metis"
        format="metis"
    elif [[ -f "$graph.hgr" ]]; then
        graph="$graph.hgr"
        format="hmetis"
    elif [[ -f "$graph.hmetis" ]]; then
        graph="$graph.hmetis"
        format="hmetis"
    fi

    if [[ -f "$graph" ]]; then
        echo -n "${invoke_from_disk_args[bin]} "
        echo -n "-h $graph "
        echo -n "--input-file-format=$format "
        echo -n "--instance-type=$graph "
        echo -n "-o cut "
        echo -n "-k ${invoke_from_disk_args[k]} "
        echo -n "-e ${invoke_from_disk_args[epsilon]} "
        echo -n "--seed=${invoke_from_disk_args[seed]} "
        echo -n "-t ${invoke_from_disk_args[num_threads]} "
        echo -n "${invoke_from_disk_args[algorithm_arguments]}"
        echo ""
    else 
        >&2 echo "Warning: Graph $graph does not exist"
        return 1
    fi
}

