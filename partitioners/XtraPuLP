#!/bin/bash
IsInstalled() {
    return 0
}

Binary() {
    echo ""
}

Install() {
    version="$1"
    options="$2"

    if [[ ! -x "$GLOBAL_PREFIX/bin/XtraPuLP_KaGen" ]]; then # Requirement: KaGen
        src_dir="$GLOBAL_PREFIX/src/KaGen-Partitioner"
        if [[ ! -d "$src_dir" ]]; then
            git clone git@github.com:KaHIP/KaGen-Partitioner.git "$src_dir"
        else 
            git -C "$src_dir" pull 
        fi
        
        cmake -S "$src_dir" -B "$src_dir/build" -DCMAKE_BUILD_TYPE=Release -DDKAMINPAR=On -DXTRAPULP=On $TBB_FLAG $2
        cmake --build "$src_dir/build" --parallel
    
        cp "$src_dir/build/ParHIP" "$GLOBAL_PREFIX/bin/ParHIP_KaGen"
        cp "$src_dir/build/ParMETIS" "$GLOBAL_PREFIX/bin/ParMETIS_KaGen"
        cp "$src_dir/build/dKaMinPar" "$GLOBAL_PREFIX/bin/dKaMinPar_KaGen"
        cp "$src_dir/build/XtraPuLP" "$GLOBAL_PREFIX/bin/XtraPuLP_KaGen"
        cp "$src_dir/build/_deps/PuLP/src/ext_pulp/xtrapulp/0.3/xtrapulp" "$GLOBAL_PREFIX/bin/XtraPuLP"
    fi 
}

InvokeFromDisk() {
    version="$1"
    graph="$2"
    k="$3"
    epsilon="$4"
    seed="$5"
    arguments="${@:9}"
  


    format="metis"

    # .bgf > .graph > .metis
    #[[ -f "$graph.bgf" ]] && graph="$graph.bgf" && format="binary-parhip"
    if [[ -f "$graph.xtrapulp" ]]; then 
        echo -n "$GLOBAL_PREFIX/bin/XtraPuLP $graph.xtrapulp $k -v 1.03 -q"
    else 
        [[ -f "$graph.graph" ]] && graph="$graph.graph"
        [[ -f "$graph.metis" ]] && graph="$graph.metis"

        echo -n "$GLOBAL_PREFIX/bin/XtraPuLP_KaGen "
        echo -n "-s $seed " 
        echo -n "-k $k "
        echo -n " $arguments"
        echo -n "-G\"static"
        echo -n ";filename=$graph"
        echo -n ";input_format=$format"
        echo -n "\""
        echo ""
    fi
}

AddKaGenParam() {
    param_kagen_name="$1"
    param_kaminpar_name="$2"
    param_arguments="${@:3}"

    value=$(ParseKaGenArgument "$param_kagen_name" $param_arguments)
    if [[ ! -z "$value" ]]; then
        echo -n "${param_kaminpar_name}=${value} "
    fi
}

InvokeFromKaGen() {
    param_version="$1"
    param_generator="$2"
    param_k="$3"
    param_epsilon="$4"
    param_seed="$5"
    param_nodes="$6"
    param_threads="$8"
    param_kagen_arguments="${9}"
    param_algo_arguments="${@:10}"

    echo -n "$GLOBAL_PREFIX/bin/XtraPuLP_KaGen "
    echo -n "-s $param_seed " # interprete as number of repetitions 
    echo -n "-k $param_k "
    echo -n " $param_algo_arguments"

    echo -n "-G\"$param_generator"

    kagen_n=$(ParseKaGenArgument "n" $param_kagen_arguments)
    kagen_m=$(ParseKaGenArgument "m" $param_kagen_arguments)
    kagen_p=$(ParseKaGenArgument "p" $param_kagen_arguments)
    kagen_a=$(ParseKaGenArgument "a" $param_kagen_arguments)
    kagen_b=$(ParseKaGenArgument "b" $param_kagen_arguments)
    kagen_c=$(ParseKaGenArgument "c" $param_kagen_arguments)
    kagen_gamma=$(ParseKaGenArgument "gamma" $param_kagen_arguments)

    kagen_max_grid_x=$(ParseKaGenArgument "max_grid_x" $param_kagen_arguments)
    kagen_max_grid_y=$(ParseKaGenArgument "max_grid_y" $param_kagen_arguments)
    kagen_grid_x=$(ParseKaGenArgument "grid_x" $param_kagen_arguments)
    kagen_grid_y=$(ParseKaGenArgument "grid_y" $param_kagen_arguments)
    kagen_scaled_grid_y=$(ParseKaGenArgument "scaled_grid_y" $param_kagen_arguments)
    kagen_scaled_grid_x=$(ParseKaGenArgument "scaled_grid_x" $param_kagen_arguments)
    kagen_cols_per_pe=$(ParseKaGenArgument "cols_per_pe" $param_kagen_arguments)
    kagen_rows_per_pe=$(ParseKaGenArgument "rows_per_pe" $param_kagen_arguments)
    kagen_filename=$(ParseKaGenArgument "filename" $param_kagen_arguments)

    log_nodes=$(printf "%.0f" $(echo "l($param_nodes)/l(2)" | bc -l))

    if [[ ! -z "$kagen_a" ]]; then 
        echo -n ";rmat_a=$kagen_a;rmat_b=$kagen_b;rmat_c=$kagen_c"
    fi
    if [[ ! -z "$kagen_p" ]]; then 
        echo -n ";prob=$kagen_p"
    fi
    if [[ ! -z "$kagen_gamma" ]]; then 
        echo -n ";gamma=$kagen_gamma"
    fi
    if [[ ! -z "$kagen_n" ]]; then 
        echo -n ";N=$((kagen_n+log_nodes))" # log n
    fi
    if [[ ! -z "$kagen_m" ]]; then 
        echo -n ";M=$((kagen_m+log_nodes))" # log m
    fi
    if [[ ! -z "$kagen_max_grid_x" ]]; then 
        echo -n ";max_grid_x=$kagen_max_grid_x"
    fi
    if [[ ! -z "$kagen_max_grid_y" ]]; then 
        echo -n ";max_grid_y=$kagen_max_grid_y"
    fi
    if [[ ! -z "$kagen_grid_x" ]]; then 
        echo -n ";grid_x=$kagen_grid_x"
    fi
    if [[ ! -z "$kagen_grid_y" ]]; then 
        echo -n ";grid_y=$kagen_grid_y"
    fi
    if [[ ! -z "$kagen_cols_per_pe" ]]; then 
        echo -n ";cols_per_pe=$kagen_cols_per_pe"
    fi
    if [[ ! -z "$kagen_rows_per_pe" ]]; then 
        echo -n ";rows_per_pe=$kagen_rows_per_pe"
    fi
    if [[ ! -z "$kagen_filename" ]]; then 
        echo -n ";filename=$kagen_filename"
    fi
    if [[ ! -z "$kagen_scaled_grid_y" ]]; then
        echo -n ";grid_y=$((kagen_scaled_grid_y*param_nodes))"
    fi
    if [[ ! -z "$kagen_scaled_grid_x" ]]; then
        echo -n ";grid_x=$((kagen_scaled_grid_x*param_nodes))"
    fi

    echo -n "\""
    echo ""
}
