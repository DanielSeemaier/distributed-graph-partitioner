#!/bin/bash
IsInstalled() {
    if [[ ! -x "$DGP_PREFIX/bin/dKaMinPar" ]]; then
        return 1
    fi
    if [[ ! -d "$DGP_PREFIX/src/KaMinPar" ]]; then 
        return 1
    fi

    git -C "$DGP_PREFIX/src/KaMinPar" fetch
    local_hash=$(git -C "$DGP_PREFIX/src/KaMinPar" rev-parse HEAD)
    remote_hash=$(git -C "$DGP_PREFIX/src/KaMinPar" rev-parse @{u})
    if [[ "$local_hash" == "$remote_hash" ]]; then 
        return 0
    fi

    return 1
}

Binary() {
    echo "$DGP_PREFIX/bin/dKaMinPar"
}

Install() {
    if IsInstalled; then 
        return 0
    fi

    if [[ ! -d "$DGP_PREFIX/src/KaMinPar" ]]; then 
        git clone git@github.com:DanielSeemaier/KaMinPar.git "$DGP_PREFIX/src/KaMinPar"
        git -C "$DGP_PREFIX/src/KaMinPar" submodule update --init --recursive
    else 
        git -C "$DGP_PREFIX/src/KaMinPar" pull
    fi

    cmake -S "$DGP_PREFIX/src/KaMinPar" -B "$DGP_PREFIX/src/KaMinPar/build" -DCMAKE_BUILD_TYPE=Release
    cmake --build "$DGP_PREFIX/src/KaMinPar/build" --target dKaMinPar --parallel
    mkdir -p "$DGP_PREFIX/bin"
    cp "$DGP_PREFIX/src/KaMinPar/build/apps/dKaMinPar" "$(Binary)"
}

InvokeFromDisk() {
    graph="$1"
    k="$2"
    epsilon="$3"
    seed="$4"
    threads="$7"
    arguments="${@:8}"
    
    [[ -f "$graph.graph" ]] && graph="$graph.graph"
    [[ -f "$graph.metis" ]] && graph="$graph.metis"

    if [[ -f "$graph" ]]; then
        echo "$(Binary) -G $graph -k $k -e $epsilon --seed=$seed -t $threads $arguments"
    else 
        >&2 echo "Warning: Graph $graph does not exist"
        return 1
    fi
}
