#!/bin/bash
IsInstalled() {
    version="$1"

    if [[ ! -x "$(Binary "$version")" ]]; then
        return 1
    fi
    if [[ ! -d "$PREFIX/src/$version/KaMinPar" ]]; then 
        return 1
    fi

    mkdir -p "$PREFIX/src/$version"
    git -C "$PREFIX/src/$version/KaMinPar" fetch
    local_hash=$(git -C "$PREFIX/src/$version/KaMinPar" rev-parse HEAD)
    remote_hash=$(git -C "$PREFIX/src/$version/KaMinPar" rev-parse @{u})
    if [[ "$local_hash" == "$remote_hash" ]]; then 
        return 0
    fi

    return 1
}

Binary() {
    version="$1"
    echo "$PREFIX/bin/KaMinPar-$version"
}

Install() {
    version="$1"
    options="$2"
    
    if IsInstalled "$version"; then 
        return 0
    fi

    src_dir="$PREFIX/src/$version/KaMinPar"

    if [[ ! -d "$src_dir" ]]; then 
        mkdir -p "$src_dir"
        git clone git@github.com:DanielSeemaier/KaMinPar.git "$src_dir"
        git -C "$src_dir" submodule update --init --recursive
    else 
        git -C "$src_dir" fetch origin
        git -C "$src_dir" submodule update
    fi

    branch="main"
    if [[ "$version" != "latest" ]]; then 
        branch="$version"
    fi
#    git -C "$src_dir" reset --hard "origin/$branch"

    >&2 echo "---> cmake -S $src_dir -B $src_dir/build -DCMAKE_BUILD_TYPE=Release $options"
    cmake -S "$src_dir" -B "$src_dir/build" -DCMAKE_BUILD_TYPE=Release $options
    cmake --build "$src_dir/build" --target KaMinPar --parallel
    mkdir -p "$PREFIX/bin"

    cp "$src_dir/build/apps/KaMinPar" "$(Binary "$version")"
}

InvokeFromDisk() {
    version="$1"
    graph="$2"
    k="$3"
    epsilon="$4"
    seed="$5"
    nodes="$7"
    threads="$8"
    arguments="${@:9}"
    pes=$((nodes * threads))
    
    [[ -f "$graph.graph" ]] && graph="$graph.graph"
    [[ -f "$graph.metis" ]] && graph="$graph.metis"

    if [[ -f "$graph" ]]; then
        echo "$(Binary "$version") -G $graph -k $k -e $epsilon --seed=$seed -t $pes -T -E $arguments"
    else 
        >&2 echo "Warning: Graph $graph does not exist"
        return 1
    fi
}

InvokeFromKaGen() {
    return
}
