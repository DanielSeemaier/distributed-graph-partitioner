#!/bin/bash 

SetupBuildEnv() {
    return
}

UploadExperiment() {
    echo "Error: unsupported"
}

DownloadExperiment() {
    echo "Error: unsupported"
}

GenerateJobfileHeader() {
    return 0
}

generic_last_algorithm_name=""

GenerateJobfileEntry() {
    local -n args=$1

    if (( ${args[num_nodes]} > 1 )); then
        >&2 echo "Error: generic systems do not support multi-node execution"
        exit 1
    fi

    output_info=0
    if [[ "$generic_last_algorithm_name" != "${args[algorithm]}" ]]; then
        >&2 echo "Wrapping calls for algorithm '${args[algorithm]}':"
        >&2 echo "  - Wrapper: ${args[mpi]}"
        output_info=1
        generic_last_algorithm_name="${args[algorithm]}"
    fi

    case "${args[mpi]}" in 
        taskset)
            if [[ $output_info == 1 ]]; then
                >&2 echo "      taskset -c 0-{$(( ${args[num_threads]} - 1 ))} <call>"
            fi
            echo "taskset -c 0-$(( ${args[num_threads]} - 1 )) ${args[exe]}"
            ;;
        none)
            if [[ $output_info == 1 ]]; then
                >&2 echo "      <call>"
            fi
            echo "${args[exe]}"
            ;;
        OpenMPI)
            oversubscribe=""
            overload=""
            if [[ "$_oversubscribe_mpi" == "1" ]]; then 
                oversubscribe="-oversubscribe"
                overload=":overload-allowed"
            fi
            if [[ $output_info == 1 ]]; then
                >&2 echo "      mpirun -n {${args[num_mpis]}} {$oversubscribe} --bind-to {core$overload} --map-by socket:PE={${args[num_threads]}} <call>"
            fi
            echo "mpirun -n ${args[num_mpis]} $oversubscribe --bind-to core$overload --map-by socket:PE=${args[num_threads]} ${args[exe]}"
            ;;
        *)
            >&2 echo "Error: unsupported MPI ${args[mpi]}"
            exit 1
    esac
}

GenerateJobfileSubmission() {
    for jobfile in ${@}; do
        echo "bash $jobfile"
    done
}

GenerateJobfileWrapper() {
    echo "bash $submit_impl_filename"
}
