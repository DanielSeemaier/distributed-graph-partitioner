# -*-awk-*-
BEGIN {
    header()
    reset()
}

/__BEGIN_FILE__/ {
    sub(/__BEGIN_FILE__ /, "", $0)
    split($0, parts, "___")

    data["Graph"] = parts[1]
    data["NumNodes"] = -1
    data["NumMPIsPerNode"] = -1
    data["NumThreadsPerMPI"] = -1
    data["Seed"] = -1
    data["Epsilon"] = 0.03

    split(parts[2], parts, "_")
    for (i in parts) {
        if (match(parts[i], /k([0-9]+)/, m)) {
            data["K"] = m[1]
        } else if (match(parts[i], /P([0-9]+)x([0-9]+)x([0-9]+)/, m)) {
            data["NumNodes"] = m[1]
            data["NumMPIsPerNode"] = m[2]
            data["NumThreadsPerMPI"] = m[3]
        } else if (match(parts[i], /seed([0-9]+)/, m)) {
            data["Seed"] = m[1]
        } else if (match(parts[i], /eps([0-9\.\-e]+)/, m)) {
            data["Epsilon"] = m[1]
        }
    }
}

/__END_FILE__/ {
    yield()
}

match($0, /  Imbalance: *([0-9\.e\-]+)/, m) {
    data["Imbalance"] = m[1]
}

match($0, /  Edge cut: *([0-9]+)/, m) {
    data["Cut"] = m[1]
}

#match($0, /^\|- Partitioning: \.* *([0-9\.e\-]+) s/, m) {
#    data["Time"] = m[1]
#}
#match($0, /`- Partitioning: \.* *([0-9\.e\-]+) s/, m) {
#    data["Time"] = m[1]
#}

/^TIME / {
    for (i = 2; i < NF; i++) {
        split($i, kv, "=")
        key = kv[1]
        value = kv[2]
        if (key == "partitioning") {
            data["Time"] = value
        } else if (key == "partitioning.coarsening") {
            data["TimeCoarsening"] = value
        } else if (key == "partitioning.coarsening.level[0].label_propagation") {
            data["TimeCoarseningToplevelLabelPropagation"] = value
            data["TimeCoarseningLabelPropagation"] += value
        } else if (key ~ /^partitioning\.coarsening\.level\[[1-9]\]\.label_propagation$/) {
            data["TimeCoarseningCoarseLabelPropagation"] += value
            data["TimeCoarseningLabelPropagation"] += value
        }
    }
}

END {
    yield()
}

function header() {
    printf "Graph,"
    printf "K,"
    printf "Seed,"
    printf "Cut,"
    printf "Epsilon,"
    printf "Imbalance,"
    printf "Time,"
    printf "TimeCoarsening,"
    printf "TimeCoarseningLabelPropagation,"
    printf "TimeCoarseningToplevelLabelPropagation,"
    printf "TimeCoarseningCoarseLabelPropagation,"
    printf "Cores,"
    printf "Failed\n"
}

function yield() {
    if (length(data) == 0) { return }

    printf "%s,", data["Graph"]
    printf "%d,", data["K"]
    printf "%d,", data["Seed"]
    printf "%d,", data["Cut"]
    printf "%f,", data["Epsilon"]
    printf "%f,", data["Imbalance"]
    printf "%f,", data["Time"]
    printf "%f,", data["TimeCoarsening"]
    printf "%f,", data["TimeCoarseningLabelPropagation"]
    printf "%f,", data["TimeCoarseningToplevelLabelPropagation"]
    printf "%f,", data["TimeCoarseningCoarseLabelPropagation"]
    printf "%d,", data["NumNodes"] * data["NumMPIsPerNode"] * data["NumThreadsPerMPI"]
    printf "%d\n", (data["Time"] == "")

    reset()
}

function reset() {
    split("", data)
}
