# -*-awk-*-
BEGIN {
    header()
    reset()
}

/__BEGIN_FILE__/ {
    sub(/__BEGIN_FILE__ /, "", $0)
    split($0, parts, "___")
    data["Graph"] = parts[1]

    split(parts[2], parts, "_")
    for (i in parts) {
        if (match(parts[i], /k([0-9]+)/, m)) {
            data["K"] = m[1]
        } else if (match(parts[i], /P([0-9]+)x([0-9]+)x([0-9]+)/, m)) {
            data["NumNodes"] = m[1]
            data["NumMPIsPerNode"] = m[2]
            data["NumThreadsPerMPI"] = m[3]
        } else if (match(parts[i], /seed([0-9]+)/, m)) {
            data["Seed"] = m[1]
        } else if (match(parts[i], /eps([0-9\.\-e]+)/, m)) {
            data["Epsilon"] = m[1]
        }
    }

    level = 0
}

/__END_FILE__/ {
    yield()
}

match($0, /global_n=([0-9]+) global_m=([0-9]+)/, m) {
    if (level == 0) {
	    data["N"] = m[1]
	    data["M"] = m[2]
        level++
    }
}

match($0, /seed=([0-9]+)/, m) {
    data["Seed"] = m[1]
}

match($0, /-> imbalance=([0-9\.e\-]+)/, m) {
    data["Balance"] = m[1]
}

match($0, /  Number of local nodes: \[Min=([0-9]+) \| Mean=([0-9]+) \| Max=([0-9]+)/, m) {
    data["NumCoarseNodes"] = data["NumNodes"] * data["NumMPIsPerNode"] * m[2]
    data["AvgClusterWeight"] = data["N"] / data["NumCoarseNodes"]
}

match($0, /  Maximum node weight:   \[Min=([0-9]+) \| Mean=([0-9]+) \| Max=([0-9]+)/, m) {
    data["MaxMaxClusterWeight"] = m[3]
    data["AvgMaxClusterWeight"] = m[2]
    data["MinMaxClusterWeight"] = m[1]
}

match($0, /Coarsening -> Level ([0-9]+)/, m) {
    data["HierarchySize"] = m[1]
}

match($0, /    Expected: ([0-9]+)/, m) {
    data["ClusterWeightLimit"] = m[1]
}

match($0, /TIME.*partitioning=([0-9\.\-e]+).*partitioning\.sort_and_rearrange_graph=([0-9\.\-e]+)/, m) {
    data["Time"] = m[1]
    global_partitioning_time += m[2]
}

match($0, /-> cut=([0-9]+)/, m) {
    data["Cut"] = m[1]
}

END {
    yield()
}

function header() {
    printf "Graph,"
    printf "N,"
    printf "M,"
    printf "K,"
    printf "Seed,"
    printf "Cut,"
    printf "Epsilon,"
    printf "Balance,"
    printf "Time,"
    printf "HierarchySize,"
    printf "MaxMaxClusterWeight,"
    printf "AvgMaxClusterWeight,"
    printf "MinMaxClusterWeight,"
    printf "AvgClusterWeight,"
    printf "ClusterWeightLimit,"
    printf "NumNodes,"
    printf "NumMPIsPerNode,"
    printf "NumThreadsPerMPI,"
    printf "Failed\n"
}

function yield() {
    if (length(data) == 0) { return }

    failed = length(data) < 9

    printf "%s,", data["Graph"]
    printf "%d,", data["N"]
    printf "%d,", data["M"]
    printf "%d,", data["K"]
    printf "%d,", data["Seed"]
    printf "%d,", data["Cut"]
    printf "%f,", data["Epsilon"]
    printf "%f,", data["Balance"]
    printf "%f,", data["Time"]
    printf "%d,", data["HierarchySize"]
    printf "%d,", data["MaxMaxClusterWeight"]
    printf "%d,", data["AvgMaxClusterWeight"]
    printf "%d,", data["MinMaxClusterWeight"]
    printf "%d,", data["AvgClusterWeight"]
    printf "%d,", data["ClusterWeightLimit"]
    printf "%d,", data["NumNodes"]
    printf "%d,", data["NumMPIsPerNode"]
    printf "%d,", data["NumThreadsPerMPI"]
    printf "%d\n", failed
    
    reset()
}

function reset() {
    split("", data)
    split("", cuts)
    split("", imbalances)
    split("", times)
    runs = 0
    has_cut = 0
    global_partitioning_time = 0
}
