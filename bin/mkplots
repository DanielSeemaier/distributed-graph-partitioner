#!/usr/bin/env Rscript
options(show.error.locations = TRUE)
options(error = traceback)

# Load plotting functions
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
source(file.path(script.basename, "../plots/performance_profile_plot.R"), chdir = TRUE)
source(file.path(script.basename, "../plots/running_time_box_plot.R"), chdir = TRUE)

graphs_db_filename <- file.path(script.basename, "../data/graphs.csv")
graphs_db <- read.csv(graphs_db_filename, header = TRUE, sep = ",")

# CLI arguments == algorithms to look at
algorithms <- commandArgs(trailingOnly = TRUE)

# Load result file for each algorithm
data <- list()
gmean_running_times <- data.frame(Algorithm = factor(), Time = numeric())
for (algorithm in algorithms) {
  df <- load_data(algorithm, paste0(getwd(), "/results/", algorithm, ".csv"))
  df <- df %>%
    dplyr::mutate(Algorithm = paste0(Algorithm, "-", NumThreadsPerMPI))
  df <- merge(df, graphs_db, by = "Graph", all.x = TRUE)
  thread_configs <- unique(df$NumThreadsPerMPI)
  for (thread_config in thread_configs) {
    subdf <- df %>%
      dplyr::filter(NumThreadsPerMPI == thread_config)
    gmean_running_times <- gmean_running_times |>
      rbind(data.frame(
        Algorithm = factor(paste0(algorithm, "-", thread_config)),
        Time = mean(subdf$AvgTime)
      ))
    data <- append(data, list(subdf))
  }
}

ks <- unique(data[[1]]$K)
num_unique_graphs <- length(unique(data[[1]]$Graph))

# Performance profile containing all algorithms
pdf("all_cut.pdf")
all_pp <- do.call(create_performance_profile, data) +
  theme_bw() +
  create_theme() +
  ggtitle(paste0(num_unique_graphs, " unique graphs with k={", paste(ks, collapse = ", "), "}"))
print(all_pp)
dev.off()

# Pairwise performance profiles
pdf("pairwise_cut.pdf")
algorithm_indices <- 1:(length(algorithms) - 1)
for (i in 1:(length(algorithms) - 1)) {
  for (j in (i + 1):length(algorithms)) {
    pp <- create_performance_profile(data[[i]], data[[j]]) +
      theme_bw() +
      create_theme() +
      ggtitle(paste0(num_unique_graphs, " unique graphs with k={", paste(ks, collapse = ", "), "}"))
    print(pp)
  }
}
dev.off()

# Running time boxplots
pdf("all_time.pdf")
args <- data
args[["annotation"]] <- gmean_running_times
all_bp <- do.call(create_running_time_boxplot, args) + theme_bw() + create_theme()
print(all_bp)
dev.off()

# Running time per instance plots
all_data <- data.frame()
for (df in data) {
  all_data <- rbind(all_data, df)
}
all_data$K <- factor(all_data$K)
# all_data$TimePerEdge <- 1000 * 1000 * (all_data$AvgTime / all_data$M)
graphs <- unique(all_data$Graph)

pdf("per_instance_time.pdf")
for (graph in graphs) {
  subset_data <- all_data |>
    dplyr::filter(Graph == graph)
  p <- ggplot(subset_data, aes(x = K, y = AvgTime, fill = Algorithm)) +
    geom_bar(
      stat = "identity",
      position = position_dodge()
    ) +
    ggtitle(graph) +
    ylab("Time [s]") +
    xlab("Number of Blocks") +
    theme_bw() +
    create_theme()
  print(p)
}
dev.off()

side_len <- round(sqrt(length(unique(all_data$Graph))))
normalized_data <- all_data |>
  dplyr::group_by(Graph, K) |>
  dplyr::mutate(AvgCutToBest = AvgCut / min(AvgCut) - 0.9) |>
  dplyr::mutate(AvgCutToBest0 = AvgCut / min(AvgCut) - 1) |>
  dplyr::ungroup() |>
  dplyr::mutate(Title = paste0(Graph, ", MaxDeg=", MaxDeg)) |>
  dplyr::mutate(MaxDegToM = MaxDeg / M.y)
normalized_data$Title <- factor(normalized_data$Title, levels = unique(normalized_data$Title[order(normalized_data$MaxDeg, decreasing = TRUE)]))

pdf("per_instance_cut.pdf", width = side_len * 4, height = side_len * 3)
p <- ggplot(normalized_data, aes(x = K, y = AvgCutToBest, fill = Algorithm)) +
  ggtitle("Per Instance Cuts (rel to best, lower is better, 1.0 is best)") +
  geom_bar(
    stat = "identity",
    position = position_dodge()
  ) +
  ylab("Cut rel. to Best") +
  xlab("Number of Blocks") +
  theme_bw() +
  facet_wrap(~Title, ncol = side_len, scales = "free") +
  scale_y_continuous(labels = function(x) x + 0.9) +
  geom_hline(yintercept = 0.1) +
  create_theme_facet() +
  theme(legend.position = "right")
print(p)
dev.off()

pdf("maxdeg_to_m.pdf")
p <- ggplot(normalized_data, aes(x = MaxDegToM, y = AvgCutToBest, color = Algorithm)) +
  ggtitle("Rel. to Best over MaxDeg (log10 scales, lower is better, 1.0 is best)") +
  geom_point() +
  ylab("Cut rel. to Best") +
  xlab("MaxDeg / M") +
  theme_bw() +
  scale_y_continuous(trans = "log10", labels = function(x) x + 0.9) +
  scale_x_continuous(trans = "log10") +
  geom_hline(yintercept = 0.1) +
  geom_smooth(method = "lm") +
  create_theme_facet() +
  theme(legend.position = "right")
print(p)
dev.off()
