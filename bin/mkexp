#!/usr/bin/env bash
###############################################################################
# mkexp                                                                       #
#-----------------------------------------------------------------------------# 
# Reads the `Experiment` file in the current working directory and creates    #
# jobfiles for the experiment.                                                #
###############################################################################
set -o pipefail
set -o errtrace
set -o nounset
set -o errexit

# Find absolute path to this script
source=${BASH_SOURCE[0]}
while [ -L "$source" ]; do
  script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)
  source=$(readlink "$source")
  [[ $source != /* ]] && source=$script_pwd/$source
done
script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)

ROOT="$script_pwd/../"

# Init git submodules 
git -C "$script_pwd" submodule update --init --recursive 

# Parse arguments
mode="generate"
skip_install=0

declare -A active_algorithms
while [[ $# -gt 0 ]]; do 
    case $1 in 
        --dry-run)
            mode="dry-run"
            shift 
            ;;
        --results)
            mode="results"
            shift
            ;;
        --plots)
            mode="plots"
            shift 
            ;;
        --clean)
            mode="clean"
            shift 
            ;;
        --purge)
            mode="purge"
            shift
            ;;
        --stats)
            mode="stats"
            shift
            ;;
        --help)
            mode="help"
            shift
            ;;
        --submit)
            mode="submit"
            shift
            ;;
        --install)
            mode="install"
            shift 
            ;;
        --skip-install)
            skip_install=1
            shift
            ;;
        --init)
            mode="init"
            shift 
            ;;
        -*|--*)
            echo "Error: unknown option $1"
            exit 1
            ;;
        *)
            active_algorithms[$1]=1
            shift
            ;;
    esac
done

if [[ $mode == "help" ]]; then 
    echo "Usage: call from within a directory containing a file named 'Experiment'"
    echo ""
    echo "mkexp [--init, --dry-run, --install, --submit, --results, --plot, --clean, --purge, --stats, --help] [algorithms...]"
    echo ""
    echo "Without any options, generate the jobfiles and directory structure to run the experiment."
    echo "If not all algorithms should be included in the job files, specify a subset of defined algorithms as positional arguments"
    echo ""
    echo "Options are:"
    echo "    --install: Install partitioners"
    echo "    --submit: Start the experiment"
    echo "    --results: Parse log files (after executing the experiment) and output CSV files"
    echo "    --plot:  Generate performance- and running time plots from the CSV files"
    echo "    --stats: Compute some statistics from the CSV files"
    echo "    --clean: Delete generated experiment files"
    echo "    --purge: --clean, but also delete log and result files"
    echo "    -init: Initialize a new experiment"
    exit 0
fi
if [[ $mode == "init" ]]; then 
    cp "$ROOT/example/Experiment" "$PWD"
    exit 0
fi

# If positional arguments are present, filter active algorithms with it
filter_algorithms=0
if [[ -v active_algorithms[@] ]]; then
    filter_algorithms=1
fi

###############################################################################
LoadPartitioner() {
    name="$1"
    filename="$script_pwd/../partitioners/$name"
    [[ -f "$filename" ]] || {
        echo "Error: invalid partitioner $name"
        echo "       $filename"
        exit 1
    }
    . "$filename"
}

InvokePartitionerFromDisk() {
    LoadPartitioner "$1"
    InvokeFromDisk ${@:2}
}

InvokePartitionerFromKaGen() {
    LoadPartitioner "$1"
    InvokeFromKaGen "${@:2}"
}

InstallPartitioner() {
    name="$1"
    version="$2"
    LoadPartitioner "$name"
    Install "$version"
}

LoadSystem() {
    name="$1"
    filename="$script_pwd/../systems/$name"
    [[ -f "$filename" ]] || {
        echo "Error: invalid system $name"
        echo "       $filename"
        exit 1
    }
    . "$filename"
}

# Parse argument to "Threads"
ParseNodes() {
    if [[ "$1" == *x*x* ]]; then
        echo "${1%%x*}"
    else
        echo "1"
    fi
}

ParseMPIs() {
    if [[ "$1" == *x* ]]; then 
        without_threads="${1%x*}"
        echo "${without_threads#*x}"
    else # Number of nodes can be omitted
        echo "1"
    fi
}

ParseThreads() {
    echo "${1##*x}"
}

ParseTimelimit() {
    time="$1"
    seconds="${time##*:}"
    minutes=0
    hours=0
    days=0
    if [[ "$time" == *:* ]]; then 
        time="${time%:*}"
        minutes="${time##*:}"
    fi 
    if [[ "$time" == *:* ]]; then
        time="${time%:*}"
        hours="${time##*:}"
    fi
    if [[ "$time" == *:* ]]; then
        time="${time%:*}"
        days="${time}"
    fi
    
    echo $((seconds+60*minutes+60*60*hours+24*60*60*days))
}

ParseKaGenArgument() {
    param_argument_name="$1"
    param_arguments="${@:2}"
    for kv in ${param_arguments[@]}; do 
        key=${kv%=*}
        value=${kv#*=}
        if [[ "$key" == "$param_argument_name" ]]; then 
            echo "$value"
            return 0
        fi
    done
}
###############################################################################

# Functions to be called from the Experiment file
declare -A _algorithm_definition_names
declare -A _algorithm_definition_bases
declare -A _algorithm_definition_arguments
declare -A _algorithm_definition_versions

declare -a _algorithms
declare -a _ks
declare -a _seeds
declare -a _graphs 
declare -a _epsilons
declare -a _nodes_x_mpis_x_threads
declare -a _kagen_graphs
declare -a _kagen_ws

_timelimit=""
_timelimit_per_instance=""
_system="generic"
_mpi="none"

DefineAlgorithm() {
    name="$1"
    base_algorithm="$2"
    custom_arguments="${*:3}"

    [[ ! -v "_algorithm_definition_names[$name]" ]] || {
        echo "Warning: overwriting already defined algorithm $name"
    }

    _algorithm_definition_names[$name]=1
    _algorithm_definition_bases[$name]="$base_algorithm"
    _algorithm_definition_arguments[$name]="$custom_arguments"
}

DefineAlgorithmVersion() {
    name="$1"
    base_algorithm="$2"
    version="$3"

    [[ ! -v "_algorithm_definition_names[$name]" ]] || {
        echo "Warning: overwriting already defined algorithm $name"
    }

    [[ "$(GetAlgorithmVersion "$base_algorithm")" == "latest" ]] || {
        echo "Warning: base algorithm $base_algorithm of version definition $name is already a version definition with version $(GetAlgorithmVersion "$base_algorithm")"
    }

    _algorithm_definition_names[$name]=1
    _algorithm_definition_bases[$name]="$base_algorithm"
    _algorithm_definition_arguments[$name]=""
    _algorithm_definition_versions[$name]="$version"
}

System() {
    _system="$1"
}

MPI() {
    _mpi="$1"
}

Algorithms() {
    _algorithms+=(${@})
}

Threads() {
    _nodes_x_mpis_x_threads+=(${@})
}

Seeds() {
    _seeds+=(${@})
}

Ks() {
    _ks+=(${@})
}

Timelimit() {
    _timelimit="$1"
}

TimelimitPerInstance() {
    _timelimit_per_instance="$1"
}

Graphs() {
    for filename in ${1%/}/*; do 
        _graphs+=("${filename%.*}")
    done
}

Graph() {
    _graphs+=("${1%.*}")
}

Epsilons() {
    _epsilons+=(${@})
}

KaGen() {
    generator="$1"
    arguments="${@:2}"
    _kagen_graphs+=("$generator $arguments")
    _kagen_ws+=(0)
}

ScaledKaGen() {
    generator="$1"
    arguments="${@:2}"
    _kagen_graphs+=("$generator $arguments")
    _kagen_ws+=(1)
}

GetAlgorithmBase() {
    algorithm="$1"
    if [[ -v "_algorithm_definition_names[$algorithm]" ]]; then 
        GetAlgorithmBase "${_algorithm_definition_bases[$algorithm]}"
    else 
        echo "$algorithm"
    fi
}

GetAlgorithmArguments() {
    algorithm="$1"
    if [[ -v "_algorithm_definition_names[$algorithm]" ]]; then 
        additional_arguments=$(GetAlgorithmArguments "${_algorithm_definition_bases[$algorithm]}")
        echo "${_algorithm_definition_arguments[$algorithm]} $additional_arguments"
    else 
        echo ""
    fi
}

GetAlgorithmVersion() {
    algorithm="$1"
    if [[ -v "_algorithm_definition_names[$algorithm]" ]]; then 
       if [[ -v "_algorithm_definition_versions[$algorithm]" ]]; then 
           echo "${_algorithm_definition_versions[$algorithm]}"
       else 
           GetAlgorithmVersion "${_algorithm_definition_bases[$algorithm]}"
       fi
    else 
        echo "latest"
    fi
}

PrintSummary() {
    if [[ $mode != "generate" && $mode != "dry-run" ]]; then 
        return 0
    fi

    echo "Custom algorithm definitions:"
    for algorithm in ${!_algorithm_definition_names[@]}; do 
        echo "- $algorithm <- $(GetAlgorithmBase "$algorithm")"
        echo "  Version: $(GetAlgorithmVersion "$algorithm")"
        echo "  Arguments: $(GetAlgorithmArguments "$algorithm")"
    done
    echo ""

    echo "Algorithms:"
    for algorithm in ${_algorithms[@]}; do 
        echo "- $algorithm"
    done
    echo ""

    echo "Graphs:"
    for graph in ${_graphs[@]}; do 
        echo "- $graph"
    done
    echo ""

    echo "KaGen graphs:"
    for i in "${!_kagen_graphs[@]}"; do 
        arguments="${_kagen_graphs[$i]}"
        is_ws="${_kagen_ws[$i]}"
        echo "- $arguments (Weakly scaled: $is_ws)"
    done 
    echo ""

    echo "Weakly scaled KaGen graphs:"
    for graph in "${_ws_kagen_graphs[@]}"; do 
        echo "- $graph"
    done
    echo ""

    echo "Parallel executions:"
    for nodes_x_mpis_x_threads in ${_nodes_x_mpis_x_threads[@]}; do
        echo "- $(ParseNodes "$nodes_x_mpis_x_threads")x$(ParseMPIs "$nodes_x_mpis_x_threads")x$(ParseThreads "$nodes_x_mpis_x_threads")"
    done
    echo ""

    echo "Seeds: ${_seeds[*]}"
    echo "Ks: ${_ks[*]}"
}

# Check that there is an Experiment file
[[ -f "Experiment" ]] || {
    echo "Error: no Experiment file contained in the current working directory"
    echo "  Run 'mkexp --init' to initialize a new experiment in the current directory"
    exit 1
}

# Read Experiment file
. Experiment

# Filter active algorithms
if [[ $filter_algorithms != "0" ]]; then 
    declare -a filtered_algorithms
    for algorithm in ${_algorithms[@]}; do 
        if [[ -v "active_algorithms[$algorithm]" ]]; then 
            filtered_algorithms+=("$algorithm")
        else 
            echo "Disable target $algorithm"
        fi
    done
    _algorithms=("${filtered_algorithms[@]}")
fi

# Install required partitioners
PREFIX="$PWD/usr"
mkdir -p "$PREFIX" "$PREFIX/bin" "$PREFIX/lib" "$PREFIX/include"

export PATH="$PREFIX/bin:$PATH"
export C_INCLUDE_PATH="$PREFIX/include:${C_INCLUDE_PATH-""}"
export CPLUS_INCLUDE_PATH="$PREFIX/include:${CPLUS_INCLUDE_PATH-""}"
export LIBRARY_PATH="$PREFIX/lib:${LIBRARY_PATH-""}"
export LD_LIBRARY_PATH="$PREFIX/lib:${LD_LIBRARY_PATH-""}"

ExportEnv() {
    echo "export PATH=\"$PATH\""
    echo "export C_INCLUDE_PATH=\"$C_INCLUDE_PATH\""
    echo "export CPLUS_INCLUDE_PATH=\"$CPLUS_INCLUDE_PATH\""
    echo "export LIBRARY_PATH=\"$LIBRARY_PATH\""
    echo "export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\""
}

if [[ $skip_install == "0" && ($mode == "generate" || $mode == "install") ]]; then
    for algorithm in ${_algorithms[@]}; do
        base=$(GetAlgorithmBase "$algorithm")
        version=$(GetAlgorithmVersion "$algorithm")
        InstallPartitioner "$base" "$version"
    done
fi

# Default unset variables
[[ -v "_nodes_x_mpis_x_threads" ]] || _nodes_x_mpis_x_threads+=("1x1x1")
[[ -v "_epsilons" ]] || _epsilons+=("0.03")
[[ -v "_seeds" ]] || _seeds+=("0")

gitignore_filename="$PWD/.gitignore"
submit_filename="$PWD/submit.sh"
job_files_dir="$PWD/jobs"
log_files_dir="$PWD/logs"
results_dir="$PWD/results"

# Create files file
if [[ $mode == "generate" ]]; then 
    cat <<EOT > "$gitignore_filename"
submit.sh
parse.sh
nohup.out
logs/
jobs/
usr/
EOT

    echo "#!/usr/bin/env bash" > "$submit_filename"
    chmod +x "$submit_filename"

    mkdir -p "$job_files_dir"
    mkdir -p "$log_files_dir"

    for algorithm in ${_algorithms[@]}; do 
        mkdir -p "$log_files_dir/$algorithm"
    done
fi

if [[ $mode == "parse" ]]; then
    mkdir -p "$results_dir"
fi

# Generate jobs
LoadSystem "$_system"

if [[ $mode == "generate" ]]; then
    declare -a jobfiles
    for nodes_x_mpis_x_threads in ${_nodes_x_mpis_x_threads[@]}; do
        nodes=$(ParseNodes "$nodes_x_mpis_x_threads")
        mpis=$(ParseMPIs "$nodes_x_mpis_x_threads")
        threads=$(ParseThreads "$nodes_x_mpis_x_threads")

        job_filename="$job_files_dir/jobs_${nodes}x${mpis}x${threads}.sh"
        GenerateJobfileHeader "$_mpi" "$nodes" "$mpis" "$threads" "$_timelimit" > "$job_filename"
        ExportEnv > "$job_filename"
        jobfiles+=("$job_filename")

        for epsilon in ${_epsilons[@]}; do 
            for algorithm in ${_algorithms[@]}; do
                algo_base=$(GetAlgorithmBase "$algorithm")
                algo_version=$(GetAlgorithmVersion "$algorithm")
                algo_arguments=$(GetAlgorithmArguments "$algorithm")

                for k in ${_ks[@]}; do
                    # Graphs from disk
                    for graph in ${_graphs[@]}; do
                        for seed in ${_seeds[@]}; do 
                            log_filename="$log_files_dir/$algorithm/$(basename "$graph")___P${nodes}x${mpis}x${threads}_seed${seed}_eps${epsilon}_k${k}.log"
                            exe=$(InvokePartitionerFromDisk "$algo_base" "$algo_version" "$graph" "$k" "$epsilon" "$seed" "$nodes" "$mpis" "$threads" "$algo_arguments")
                            exe_with_mpi=$(GenerateJobfileEntry "$nodes" "$mpis" "$threads" "$exe")
                            exe_with_timelimit="$exe_with_mpi"
                            if [[ "$_timelimit_per_instance" != "" ]]; then 
                                exe_with_timelimit="timeout $(ParseTimelimit "$_timelimit_per_instance")s $exe_with_timelimit"
                            fi
                            echo "$exe_with_timelimit >> $log_filename" >> "$job_filename"
                        done # seed
                    done # graph

                    # KaGen graphs
                    for i in ${!_kagen_graphs[@]}; do
                        seed="${#_seeds[@]}"

                        kagen="${_kagen_graphs[$i]}"
                        kagen_str="$(echo "$kagen" | tr ' ' '-')"
                        kagen_arguments_arr=($kagen)
                        kagen_generator="${kagen_arguments_arr[0]}"
                        kagen_arguments="${kagen_arguments_arr[@]:1}"

                        log_filename="$log_files_dir/$algorithm/${kagen_str}-ws=${_kagen_ws[$i]}___P${nodes}x${mpis}x${threads}_seed${seed}_eps${epsilon}_k${k}.log"

                        fake_nodes="$nodes"
                        if [[ "${_kagen_ws[$i]}" == 0 ]]; then 
                            fake_nodes=1
                        fi

                        exe=$(InvokePartitionerFromKaGen "$algo_base" "$algo_version" "$kagen_generator" "$k" "$epsilon" "$seed" "$fake_nodes" "$mpis" "$threads" "$kagen_arguments" "$algo_arguments")
                        exe_with_mpi=$(GenerateJobfileEntry "$nodes" "$mpis" "$threads" "$exe")
                        exe_with_timelimit="$exe_with_mpi"
                        if [[ "$_timelimit_per_instance" != "" ]]; then 
                            exe_with_timelimit="timeout $(ParseTimelimit "$_timelimit_per_instance")s $exe_with_timelimit"
                        fi
                        echo "$exe_with_timelimit >> $log_filename" >> "$job_filename"
                    done # generator
                done # k
            done # algorithm
        done # epsilon
    done # parallelism setting

    GenerateJobfileSubmission ${jobfiles[@]} >> $submit_filename
fi 

if [[ $mode == "results" ]]; then
    mkdir -p "$results_dir"
    for algorithm in ${_algorithms[@]}; do 
        base=$(GetAlgorithmBase "$algorithm")
        mkresults "$base" "$log_files_dir/$algorithm" > "$results_dir/$algorithm.csv"
    done
fi

if [[ $mode == "clean" || $mode == "purge" ]]; then 
    rm -rf "$submit_filename" "$job_files_dir" parse.sh
fi
if [[ $mode == "purge" ]]; then
    echo "!!! About to delete the following directories:"
    echo "    $log_files_dir"
    echo "    $results_dir"
    echo "    $PREFIX"
    read -p "Continue (y/n)?" cont
    if [[ $cont == "y" ]]; then
        rm -rf "$log_files_dir" "$results_dir" "$PREFIX"
    fi
fi

if [[ $mode == "plots" ]]; then 
    mkplots ${_algorithms[@]}
fi

if [[ $mode == "stats" ]]; then 
    mkstats ${_algorithms[@]}
fi

if [[ $mode == "submit" ]]; then 
    if [[ ! -f "$submit_filename" ]]; then 
        mkexp
    fi
    bash "$submit_filename"
fi

exit 0

