#!/usr/bin/env bash
###############################################################################
# MakeExperiment                                                              #
#-----------------------------------------------------------------------------# 
# Reads the `Experiment` file in the current working directory and creates    #
# jobfiles for the experiment.                                                #
###############################################################################

set -o pipefail
set -o errtrace
set -o nounset
set -o errexit

# Find absolute path to this script
source=${BASH_SOURCE[0]}
while [ -L "$source" ]; do
  script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)
  source=$(readlink "$source")
  [[ $source != /* ]] && source=$script_pwd/$source
done
script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)

# If arguments are present, filter active algorithms with it
filter_algorithms=$((${#@} != 0))
declare -A active_algorithms
for algorithm in ${@}; do 
    active_algorithms[$algorithm]=1
done

###############################################################################
LoadPartitioner() {
    name="$1"
    filename="$script_pwd/../partitioners/$name"
    [[ -f "$filename" ]] || {
        echo "Error: invalid partitioner $name"
        echo "       $filename"
        exit 1
    }
    . "$filename"
}

InvokePartitionerFromDisk() {
    LoadPartitioner "$1"
    InvokeFromDisk ${@:2}
}

InstallPartitioner() {
    LoadPartitioner "${@}"
    Install
}

LoadSystem() {
    name="$1"
    filename="$script_pwd/../systems/$name"
    [[ -f "$filename" ]] || {
        echo "Error: invalid system $name"
        echo "       $filename"
        exit 1
    }
    . "$filename"
}

# Parse argument to "Threads"
ParseNodes() {
    if [[ "$1" == *x*x* ]]; then
        echo "${1%%x*}"
    else
        echo "1"
    fi
}

ParseMPIs() {
    if [[ "$1" == *x* ]]; then 
        without_threads="${1%x*}"
        echo "${without_threads#*x}"
    else # Number of nodes can be omitted
        echo "1"
    fi
}

ParseThreads() {
    echo "${1##*x}"
}

ParseTimelimit() {
    time="$1"
    seconds="${time##*:}"
    minutes=0
    hours=0
    days=0
    if [[ "$time" == *:* ]]; then 
        time="${time%:*}"
        minutes="${time##*:}"
    fi 
    if [[ "$time" == *:* ]]; then
        time="${time%:*}"
        hours="${time##*:}"
    fi
    if [[ "$time" == *:* ]]; then
        time="${time%:*}"
        days="${time}"
    fi
    
    echo $((seconds+60*minutes+60*60*hours+24*60*60*days))
}
###############################################################################

# Functions to be called from the Experiment file
declare -A _algorithm_definition_names
declare -A _algorithm_definition_bases
declare -A _algorithm_definition_arguments

declare -a _algorithms
declare -a _ks
declare -a _seeds
declare -a _graphs 
declare -a _epsilons
declare -a _nodes_x_mpis_x_threads

_timelimit=""
_timelimit_per_instance=""
_system="generic"
_mpi="none"

DefineAlgorithm() {
    name="$1"
    base_algorithm="$2"
    custom_arguments="${*:3}"

    [[ ! -v "_algorithm_definition_names[$name]" ]] || {
        echo "Warning: overwriting already defined algorithm $name"
    }

    _algorithm_definition_names[$name]=1
    _algorithm_definition_bases[$name]="$base_algorithm"
    _algorithm_definition_arguments[$name]="$custom_arguments"
}

System() {
    _system="$1"
}

MPI() {
    _mpi="$1"
}

Algorithms() {
    _algorithms+=(${@})
}

Threads() {
    _nodes_x_mpis_x_threads+=(${@})
}
Seeds() {
    _seeds+=(${@})
}

Ks() {
    _ks+=(${@})
}

Timelimit() {
    _timelimit="$1"
}

TimelimitPerInstance() {
    _timelimit_per_instance="$1"
}

Graphs() {
    for filename in ${1%/}/*; do 
        _graphs+=("${filename%.*}")
    done
}

Graph() {
    _graphs+=("${1%.*}")
}

Epsilons() {
    _epsilons+=(${@})
}

KaGen() {

    return 0
}

ScaledKaGen() {

    return 0
}

PrintSummary() {
    echo "Custom algorithm definitions:"
    for algorithm in ${!_algorithm_definition_names[@]}; do 
        echo "- $algorithm <- ${_algorithm_definition_bases[$algorithm]}"
        echo "  ${_algorithm_definition_arguments[$algorithm]}"
    done
    echo ""

    echo "Algorithms:"
    for algorithm in ${_algorithms[@]}; do 
        echo "- $algorithm"
    done
    echo ""

    echo "Graphs:"
    for graph in ${_graphs[@]}; do 
        echo "- $graph"
    done
    echo ""

    echo "Parallel executions:"
    for nodes_x_mpis_x_threads in ${_nodes_x_mpis_x_threads[@]}; do
        echo "- $(ParseNodes "$nodes_x_mpis_x_threads")x$(ParseMPIs "$nodes_x_mpis_x_threads")x$(ParseThreads "$nodes_x_mpis_x_threads")"
    done
    echo ""

    echo "Seeds: ${_seeds[*]}"
    echo "Ks: ${_ks[*]}"
}

# Check that there is an Experiment file
[[ -f "Experiment" ]] || {
    echo "Error: no Experiment file contained in the current working directory"
    exit 1
}

# Read Experiment file
. Experiment

# Filter active algorithms
if [[ $filter_algorithms != "0" ]]; then 
    declare -a filtered_algorithms
    for algorithm in ${_algorithms[@]}; do 
        if [[ -v "active_algorithms[$algorithm]" ]]; then 
            filtered_algorithms+=("$algorithm")
        else 
            echo "Disable target $algorithm"
        fi
    done
    _algorithms=$filtered_algorithms
fi

# Install required partitioners
for algorithm in ${_algorithms[@]}; do
    if [[ -v "_algorithm_definition_names[$algorithm]" ]]; then 
        InstallPartitioner "${_algorithm_definition_bases[$algorithm]}"
    else 
        InstallPartitioner "$algorithm"
    fi
done

# Default unset variables
[[ -v "_nodes_x_mpis_x_threads" ]] || _nodes_x_mpis_x_threads+=("1x1x1")
[[ -v "_epsilons" ]] || _epsilons+=("0.03")
[[ -v "_seeds" ]] || _seeds+=("0")

# Create submit file
gitignore_filename="$PWD/.gitignore"
cat <<EOT > "$gitignore_filename"
submit.sh
parse.sh
nohup.out
logs/
jobs/
EOT

submit_filename="$PWD/submit.sh"
echo "#!/usr/bin/env bash" > "$submit_filename"
chmod +x "$submit_filename"

job_files_dir="$PWD/jobs"
mkdir -p "$job_files_dir"

log_files_dir="$PWD/logs"
mkdir -p "$log_files_dir"

for algorithm in ${_algorithms[@]}; do 
    mkdir -p "$log_files_dir/$algorithm"
done

parser_filename="$PWD/parse.sh"
echo "#!/usr/bin/env bash" > "$parser_filename"
chmod +x "$parser_filename"

results_dir="$PWD/results"
mkdir -p "$results_dir"

# Generate jobs
LoadSystem "$_system"

FromDiskInvocation() {
    seed="$1"
    epsilon="$2"
    algorithm="$3"
    k="$4"
    graph="$5"
    nodes="$6"
    mpis="$7"
    threads="$8"

    if [[ -v "_algorithm_definition_names[$algorithm]" ]]; then
        base="${_algorithm_definition_bases[$algorithm]}"
        arguments="${_algorithm_definition_arguments[$algorithm]}"
        InvokePartitionerFromDisk "$base" "$graph" "$k" "$epsilon" "$seed" "$nodes" "$mpis" "$threads" "$arguments"
    else
        InvokePartitionerFromDisk "$algorithm" "$graph" "$k" "$epsilon" "$seed" "$nodes" "$mpis" "$threads" ""
    fi
}

declare -a jobfiles
for nodes_x_mpis_x_threads in ${_nodes_x_mpis_x_threads[@]}; do
    nodes=$(ParseNodes "$nodes_x_mpis_x_threads")
    mpis=$(ParseMPIs "$nodes_x_mpis_x_threads")
    threads=$(ParseThreads "$nodes_x_mpis_x_threads")

    job_filename="$job_files_dir/jobs_${nodes}x${mpis}x${threads}.sh"
    GenerateJobfileHeader "$_mpi" "$nodes" "$mpis" "$threads" "$_timelimit" > "$job_filename"
    jobfiles+=("$job_filename")
   
    for seed in ${_seeds[@]}; do 
        for epsilon in ${_epsilons[@]}; do 
            for algorithm in ${_algorithms[@]}; do
                for k in ${_ks[@]}; do
                    # Graphs from disk
                    for graph in ${_graphs[@]}; do
                        log_filename="$log_files_dir/$algorithm/$(basename "$graph")___P${nodes}x${mpis}x${threads}_seed${seed}_eps${epsilon}_k${k}.log"
                        exe=$(FromDiskInvocation "$seed" "$epsilon" "$algorithm" "$k" "$graph" "$nodes" "$mpis" "$threads")
                        exe_with_mpi=$(GenerateJobfileEntry "$nodes" "$mpis" "$threads" "$exe")
                        exe_with_timelimit="$exe_with_mpi"
                        if [[ "$_timelimit_per_instance" != "" ]]; then 
                            exe_with_timelimit="timeout $(ParseTimelimit "$_timelimit_per_instance")s $exe_with_timelimit"
                        fi
                        echo "$exe_with_timelimit >> $log_filename" >> "$job_filename"
                    done

                    # Graphs from KaGen
                done
            done
        done
    done
done

GenerateJobfileSubmission ${jobfiles[@]} >> $submit_filename

for algorithm in ${_algorithms[@]}; do 
    base="$algorithm"
    if [[ -v "_algorithm_definition_names[$algorithm]" ]]; then
        base="${_algorithm_definition_bases[$algorithm]}"
    fi
    echo "ParseLogs \"$base\" \"$log_files_dir/$algorithm\" > \"$results_dir/$algorithm.csv\"" >> "$parser_filename"
done

exit 0

